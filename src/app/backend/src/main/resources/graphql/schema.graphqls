type Query {
    # Contractor queries
    contractors: [Contractor!]!
    contractor(id: ID!): Contractor
    contractorsByStatus(status: ContractorStatus!): [Contractor!]!
    searchContractors(name: String!): [Contractor!]!
    nearbyContractors(lat: Float!, lng: Float!, radius: Float!): [Contractor!]!
    
    # User queries
    users: [User!]!
    user(id: ID!): User
    currentUser: User
}

type Mutation {
    # Contractor mutations
    createContractor(input: CreateContractorInput!): Contractor!
    updateContractor(input: UpdateContractorInput!): Contractor!
    deleteContractor(id: ID!): Boolean!
    
    # User mutations
    createUser(input: CreateUserInput!): User!
    updateUser(input: UpdateUserInput!): User!
    deleteUser(id: ID!): Boolean!
    
    # Authentication mutations
    login(username: String!, password: String!): AuthPayload!
    logout: Boolean!
    refreshToken(token: String!): AuthPayload!
}

type Subscription {
    contractorCreated: Contractor!
    contractorUpdated: Contractor!
    contractorDeleted: ID!
}

# Types
type Contractor {
    id: ID!
    name: String!
    legalName: String
    inn: String
    kpp: String
    email: String
    phone: String
    address: String
    coordinates: Coordinates
    status: ContractorStatus!
    createdAt: String!
    updatedAt: String!
    contacts: [ContractorContact!]!
}

type ContractorContact {
    id: ID!
    contractorId: ID!
    name: String!
    position: String
    email: String
    phone: String
    isPrimary: Boolean!
    createdAt: String!
    updatedAt: String!
}

type User {
    id: ID!
    username: String!
    email: String!
    firstName: String
    lastName: String
    role: UserRole!
    isActive: Boolean!
    createdAt: String!
    updatedAt: String!
}

type Coordinates {
    lat: Float!
    lng: Float!
}

type AuthPayload {
    token: String!
    user: User!
    expiresIn: Int!
}

# Enums
enum ContractorStatus {
    ACTIVE
    INACTIVE
    PENDING
    BLOCKED
}

enum UserRole {
    ADMIN
    MANAGER
    USER
}

# Input types
input CreateContractorInput {
    name: String!
    legalName: String
    inn: String
    kpp: String
    email: String
    phone: String
    address: String
    coordinates: CoordinatesInput
    status: ContractorStatus
}

input UpdateContractorInput {
    id: ID!
    name: String
    legalName: String
    inn: String
    kpp: String
    email: String
    phone: String
    address: String
    coordinates: CoordinatesInput
    status: ContractorStatus
}

input CoordinatesInput {
    lat: Float!
    lng: Float!
}

input CreateUserInput {
    username: String!
    email: String!
    password: String!
    firstName: String
    lastName: String
    role: UserRole
}

input UpdateUserInput {
    id: ID!
    username: String
    email: String
    firstName: String
    lastName: String
    role: UserRole
    isActive: Boolean
}