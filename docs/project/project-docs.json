{
  "project": {
    "metadata": {
      "name": "FEPRO",
      "version": "1.0.0",
      "description": "Federation Professionals - система управления отношениями с контрагентами",
      "author": "Александр",
      "created": "2025-10-05",
      "lastUpdated": "2025-10-05",
      "status": "planning",
      "repository": "https://github.com/bondalen/fepro.git",
      "license": "MIT",
      "keywords": ["crm", "contractors", "business", "management", "federation"],
      "documentationRules": "docs/project-documentation-rules.md"
    },
    "architecture": {
      "type": "full-stack",
      "pattern": "modular-monolith",
      "pattern_decision": "docs/decisions/007-modular-monolith-pattern.md",
      "backend": {
        "framework": "Spring Boot 3.4.5",
        "framework_decision": "docs/decisions/006-spring-boot-framework-choice.md",
        "language": "Java 21 LTS",
        "database": "PostgreSQL 16",
        "database_decision": "docs/decisions/005-postgresql-database-choice.md",
        "api": "GraphQL",
        "api_decision": "docs/decisions/003-graphql-api-choice.md",
        "security": "JWT + Spring Security",
        "security_decision": "docs/decisions/009-jwt-security-approach.md",
        "cache": "Hazelcast + Caffeine",
        "cache_decision": "docs/decisions/001-hazelcast-choice.md",
        "migrations": "Liquibase",
        "migrations_decision": "docs/decisions/010-liquibase-migrations-strategy.md",
        "reactive": "R2DBC",
        "reactive_decision": "docs/decisions/008-r2dbc-reactive-choice.md",
        "monitoring": "Spring Boot Actuator"
      },
      "frontend": {
        "framework": "Vue.js 3.4.21",
        "framework_decision": "docs/decisions/004-vuejs-framework-choice.md",
        "language": "TypeScript 5.4.0",
        "ui": "Quasar Framework 2.16.1",
        "graphql": "Apollo Client",
        "build": "Vite",
        "maps": "Leaflet",
        "routing": "Vue Router",
        "state": "Pinia"
      },
      "infrastructure": {
        "containerization": "Docker + Docker Compose",
        "database": "PostgreSQL 16 + PostGIS",
        "cache": "Hazelcast",
        "cache_decision": "docs/decisions/001-hazelcast-choice.md",
        "monitoring": "Spring Boot Actuator",
        "ai": "MCP Servers",
        "deployment": "Docker containers"
      }
    },
    "features": {
      "core": [
        "Управление контрагентами",
        "CRM функциональность",
        "Документооборот",
        "Финансовый учет",
        "Система уведомлений",
        "Многоязычность (i18n)"
      ],
      "advanced": [
        "ГИС-аналитика контрагентов на картах",
        "Автоматическая генерация документов (PDF, Excel, CSV)",
        "WebSocket уведомления",
        "Интеграция с внешними API",
        "Система отчетности",
        "Кэширование и оптимизация"
      ],
      "integrations": [
        "Платежные системы",
        "Email/SMS сервисы",
        "Внешние CRM системы",
        "Банковские API",
        "Государственные сервисы"
      ]
    },
    "modules": [
      {
        "name": "contractor-management",
        "title": "Управление контрагентами",
        "description": "Основной модуль для работы с контрагентами",
        "priority": "critical",
        "status": "planned",
        "dependencies": ["authentication", "database"],
        "api": {
          "endpoints": [
            "POST /graphql - createContractor",
            "GET /graphql - getContractors",
            "PUT /graphql - updateContractor",
            "DELETE /graphql - deleteContractor"
          ]
        },
        "database": {
          "tables": ["contractors", "contractor_contacts", "contractor_history"],
          "relations": ["organizations", "projects", "documents"]
        }
      },
      {
        "name": "authentication",
        "title": "Аутентификация и авторизация",
        "description": "Система безопасности и управления пользователями",
        "priority": "critical",
        "status": "planned",
        "dependencies": [],
        "api": {
          "endpoints": [
            "POST /graphql - login",
            "POST /graphql - register",
            "POST /graphql - refreshToken",
            "POST /graphql - logout"
          ]
        },
        "database": {
          "tables": ["users", "roles", "permissions", "user_sessions"],
          "relations": []
        }
      },
      {
        "name": "document-management",
        "title": "Управление документами",
        "description": "Система документооборота",
        "priority": "high",
        "status": "planned",
        "dependencies": ["contractor-management", "authentication"],
        "api": {
          "endpoints": [
            "POST /graphql - createDocument",
            "GET /graphql - getDocuments",
            "PUT /graphql - updateDocument",
            "DELETE /graphql - deleteDocument"
          ]
        },
        "database": {
          "tables": ["documents", "document_templates", "document_history"],
          "relations": ["contractors", "users"]
        }
      },
      {
        "name": "gis-analytics",
        "title": "ГИС-аналитика",
        "description": "Геоинформационная аналитика контрагентов",
        "priority": "medium",
        "status": "planned",
        "dependencies": ["contractor-management", "postgis"],
        "api": {
          "endpoints": [
            "GET /graphql - getContractorLocations",
            "GET /graphql - getAnalyticsByRegion",
            "POST /graphql - createMapView"
          ]
        },
        "database": {
          "tables": ["contractor_locations", "regions", "analytics_cache"],
          "relations": ["contractors"]
        }
      }
    ],
    "database": {
      "schema": "fepro",
      "version": "1.0.0",
      "engine": "PostgreSQL 16",
      "extensions": ["PostGIS", "uuid-ossp", "pg_trgm"],
      "tables": [
        {
          "name": "contractors",
          "description": "Таблица контрагентов",
          "columns": [
            {"name": "id", "type": "UUID", "constraints": "PRIMARY KEY DEFAULT gen_random_uuid()"},
            {"name": "name", "type": "VARCHAR(255)", "constraints": "NOT NULL"},
            {"name": "legal_name", "type": "VARCHAR(255)", "constraints": "NULL"},
            {"name": "inn", "type": "VARCHAR(12)", "constraints": "UNIQUE NULL"},
            {"name": "kpp", "type": "VARCHAR(9)", "constraints": "NULL"},
            {"name": "email", "type": "VARCHAR(255)", "constraints": "NULL"},
            {"name": "phone", "type": "VARCHAR(50)", "constraints": "NULL"},
            {"name": "address", "type": "TEXT", "constraints": "NULL"},
            {"name": "coordinates", "type": "GEOMETRY(POINT, 4326)", "constraints": "NULL"},
            {"name": "status", "type": "VARCHAR(50)", "constraints": "NOT NULL DEFAULT 'active'"},
            {"name": "created_at", "type": "TIMESTAMP", "constraints": "NOT NULL DEFAULT NOW()"},
            {"name": "updated_at", "type": "TIMESTAMP", "constraints": "NOT NULL DEFAULT NOW()"}
          ],
          "indexes": [
            {"name": "idx_contractors_inn", "columns": ["inn"], "type": "UNIQUE"},
            {"name": "idx_contractors_coordinates", "columns": ["coordinates"], "type": "GIST"},
            {"name": "idx_contractors_status", "columns": ["status"], "type": "BTREE"},
            {"name": "idx_contractors_name", "columns": ["name"], "type": "BTREE"}
          ]
        },
        {
          "name": "users",
          "description": "Таблица пользователей системы",
          "columns": [
            {"name": "id", "type": "UUID", "constraints": "PRIMARY KEY DEFAULT gen_random_uuid()"},
            {"name": "username", "type": "VARCHAR(100)", "constraints": "UNIQUE NOT NULL"},
            {"name": "email", "type": "VARCHAR(255)", "constraints": "UNIQUE NOT NULL"},
            {"name": "password_hash", "type": "VARCHAR(255)", "constraints": "NOT NULL"},
            {"name": "first_name", "type": "VARCHAR(100)", "constraints": "NULL"},
            {"name": "last_name", "type": "VARCHAR(100)", "constraints": "NULL"},
            {"name": "role", "type": "VARCHAR(50)", "constraints": "NOT NULL DEFAULT 'USER'"},
            {"name": "is_active", "type": "BOOLEAN", "constraints": "NOT NULL DEFAULT true"},
            {"name": "created_at", "type": "TIMESTAMP", "constraints": "NOT NULL DEFAULT NOW()"},
            {"name": "updated_at", "type": "TIMESTAMP", "constraints": "NOT NULL DEFAULT NOW()"}
          ],
          "indexes": [
            {"name": "idx_users_username", "columns": ["username"], "type": "UNIQUE"},
            {"name": "idx_users_email", "columns": ["email"], "type": "UNIQUE"},
            {"name": "idx_users_role", "columns": ["role"], "type": "BTREE"}
          ]
        }
      ],
      "migrations": [
        {
          "version": "001",
          "description": "Initial schema creation",
          "file": "001-initial-schema.xml",
          "status": "planned",
          "changes": [
            "Create contractors table",
            "Create users table",
            "Create basic indexes"
          ]
        },
        {
          "version": "002",
          "description": "Add PostGIS support",
          "file": "002-add-postgis.xml",
          "status": "planned",
          "changes": [
            "Enable PostGIS extension",
            "Add spatial indexes",
            "Create regions table"
          ]
        }
      ]
    },
    "development": {
      "setup": {
        "prerequisites": [
          "Java 21 LTS",
          "Node.js 20+",
          "PostgreSQL 16",
          "Docker",
          "Maven 3.9+",
          "Git"
        ],
        "scripts": {
          "dev": {
            "command": "mvn spring-boot:run",
            "description": "Запуск Spring Boot приложения в режиме разработки",
            "location": "backend/",
            "usage": "Локальная разработка backend"
          },
          "frontend": {
            "command": "npm run dev",
            "description": "Запуск Vue.js приложения в режиме разработки",
            "location": "frontend/",
            "usage": "Локальная разработка frontend"
          },
          "build": {
            "command": "mvn clean package",
            "description": "Сборка Spring Boot приложения в JAR файл",
            "location": "backend/",
            "usage": "Сборка для production"
          },
          "test": {
            "command": "mvn test",
            "description": "Запуск unit тестов",
            "location": "backend/",
            "usage": "Тестирование backend кода"
          },
          "migrate": {
            "command": "mvn liquibase:update",
            "description": "Выполнение миграций базы данных",
            "location": "backend/",
            "usage": "Обновление схемы БД"
          },
          "docker:up": {
            "command": "docker-compose up -d",
            "description": "Запуск всех сервисов в Docker",
            "location": "root/",
            "usage": "Развертывание в Docker"
          },
          "docker:down": {
            "command": "docker-compose down",
            "description": "Остановка всех Docker сервисов",
            "location": "root/",
            "usage": "Остановка развертывания"
          },
          "deploy": {
            "command": "./scripts/deploy.sh",
            "description": "Полное развертывание приложения с проверками",
            "location": "scripts/",
            "usage": "Production развертывание"
          },
          "update": {
            "command": "./scripts/update.sh",
            "description": "Обновление приложения с сохранением данных",
            "location": "scripts/",
            "usage": "Обновление production версии"
          },
          "backup": {
            "command": "./scripts/backup.sh",
            "description": "Создание резервной копии базы данных",
            "location": "scripts/",
            "usage": "Резервное копирование данных"
          },
          "blue-green": {
            "command": "./scripts/blue-green-deploy.sh",
            "description": "Blue-Green развертывание без простоя",
            "location": "scripts/",
            "usage": "Безопасное обновление production"
          }
        },
        "environment": {
          "development": {
            "database_url": "postgresql://fepro_user:fepro_pass@localhost:5432/fepro_dev",
            "hazelcast_enabled": "true",
            "backend_port": "8082",
            "frontend_port": "3000"
          }
        }
      },
      "standards": {
        "codeStyle": "Google Java Style + ESLint/Prettier",
        "gitFlow": "GitHub Flow",
        "testing": "JUnit 5 + Vue Test Utils",
        "documentation": "JSON + Markdown + ADR",
        "api": "GraphQL-first",
        "security": "JWT + RBAC"
      }
    },
    "deployment": {
      "strategy": "docker-single-image",
      "strategy_decision": "docs/decisions/002-docker-architecture.md",
      "architecture": {
        "type": "monolithic",
        "containers": ["app", "postgres"],
        "networking": "internal",
        "security": "non-root-user",
        "caching": "hazelcast-embedded",
        "caching_decision": "docs/decisions/001-hazelcast-choice.md"
      },
      "environments": {
        "development": {
          "database": "localhost:5432/fepro_dev",
          "frontend": "http://localhost:3000",
          "backend": "http://localhost:8082",
          "cache": "hazelcast-embedded",
          "docker": true,
          "profile": "dev"
        },
        "staging": {
          "database": "staging-db:5432/fepro_staging",
          "frontend": "https://staging.fepro.app",
          "backend": "https://api-staging.fepro.app",
          "cache": "hazelcast-embedded",
          "docker": true,
          "profile": "staging"
        },
        "production": {
          "database": "prod-db:5432/fepro_prod",
          "frontend": "https://fepro.app",
          "backend": "https://api.fepro.app",
          "cache": "hazelcast-embedded",
          "docker": true,
          "ssl": true,
          "profile": "prod"
        }
      },
      "docker": {
        "image": {
          "name": "fepro-app",
          "tag": "latest",
          "base": "openjdk:21-jre-alpine",
          "multi-stage": true,
          "size": "~200-300MB",
          "security": "non-root-user"
        },
        "services": {
          "app": {
            "build": ".",
            "ports": ["8082:8082"],
            "environment": ["SPRING_PROFILES_ACTIVE=prod"],
            "depends_on": ["postgres"],
            "restart": "unless-stopped",
            "user": "fepro:1001"
          },
          "postgres": {
            "image": "postgres:16-alpine",
            "environment": ["POSTGRES_DB=fepro_prod"],
            "volumes": ["postgres_data:/var/lib/postgresql/data"],
            "restart": "unless-stopped"
          }
        },
        "compose": "docker-compose.yml",
        "volumes": ["postgres_data"],
        "networks": ["fepro_network"]
      },
      "monitoring": {
        "health_checks": true,
        "prometheus_metrics": true,
        "logging": "file-rotation",
        "backup": "daily-database"
      },
      "update_strategy": {
        "type": "rolling-update",
        "backup_before_update": true,
        "health_check_after_update": true,
        "rollback_on_failure": true
      }
    },
    "timeline": {
      "phases": [
        {
          "name": "Phase 1: Foundation",
          "duration": "2 weeks",
          "startDate": "2025-01-02",
          "tasks": [
            "Настройка инфраструктуры",
            "Базовая архитектура Backend",
            "Базовая архитектура Frontend",
            "Настройка БД и миграций",
            "Создание JSON-документации"
          ],
          "status": "in_progress",
          "progress": 40
        },
        {
          "name": "Phase 2: Core Features",
          "duration": "4 weeks",
          "startDate": "2025-01-16",
          "tasks": [
            "Модуль управления отношениями с контрагентами",
            "Система аутентификации",
            "Базовый UI/UX",
            "API интеграция Frontend-Backend"
          ],
          "status": "planned",
          "progress": 0
        },
        {
          "name": "Phase 3: Advanced Features",
          "duration": "3 weeks",
          "startDate": "2025-02-13",
          "tasks": [
            "ГИС-аналитика",
            "Документооборот",
            "Система уведомлений",
            "Интеграции с внешними API"
          ],
          "status": "planned",
          "progress": 0
        }
      ]
    },
    "risks": [
      {
        "id": "R001",
        "description": "Сложность интеграции с внешними API",
        "probability": "medium",
        "impact": "high",
        "mitigation": "Поэтапная интеграция с тестированием",
        "status": "monitoring"
      },
      {
        "id": "R002",
        "description": "Производительность при работе с большими объемами данных",
        "probability": "low",
        "impact": "medium",
        "mitigation": "Оптимизация запросов и кэширование",
        "status": "monitoring"
      }
    ],
    "resources": {
      "team": [
        {
          "role": "Full-stack Developer",
          "name": "Александр",
          "responsibilities": ["Backend", "Frontend", "DevOps", "Database", "Architecture"],
          "skills": ["Java", "Vue.js", "PostgreSQL", "Docker", "GraphQL"]
        }
      ],
      "budget": {
        "development": "0 (open-source)",
        "hosting": "estimated $50/month",
        "tools": "0 (free tools)",
        "total": "estimated $50/month"
      },
      "tools": [
        "IntelliJ IDEA Community",
        "VS Code / Cursor",
        "Docker Desktop",
        "Postman",
        "GitHub"
      ],
      "documentation": {
        "decisions": "docs/decisions/",
        "architecture": "docs/architecture/",
        "technical": "docs/technical/",
        "template": "docs/decisions/decision-template.md"
      }
    }
  }
}